using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;


    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    internal void FixedUpdate(){
        pitch = Mathf.Lerp(pitch,Input.GetAxis("Vertical")*PitchRange,0.01f);
        roll = Mathf.Lerp(roll,Input.GetAxis("Horizontal")*RollRange,0.01f);
        yaw += roll * RotationalSpeed* Time.fixedDeltaTime;

        Quaternion rotation = Quaternion.Euler(pitch, yaw, roll);
        playerRB.MoveRotation(rotation);

        // add thrust
        thrust = Mathf.Max(0,Input.GetAxis("Thrust")*MaximumThrust);
        thrust = Mathf.Min(thrust,MaximumThrust);
        playerRB.AddForce(thrust*playerRB.transform.forward);

        // aerodynamics
        Vector3 xlocal = transform.right;
        Vector3 ylocal = transform.up;
        Vector3 zlocal = transform.forward;
        float vf = Vector3.Dot(-playerRB.velocity,playerRB.transform.forward);
        Vector3 flift = LiftCoefficient*(vf*vf)*ylocal;
        playerRB.AddForce(flift);
        Vector3 ffd = Mathf.Sign(vf)*ForwardDragCoefficient*(vf*vf)*playerRB.transform.forward;
        playerRB.AddForce(ffd);
        Updraft updraft = (Updraft) FindObjectOfType(typeof(Updraft));
        float vup = Vector3.Dot(-playerRB.velocity, playerRB.transform.up);;
        Collider[] hitColliders = Physics.OverlapSphere(transform.position,0.5f,LayerMask.GetMask("Updrafts"));
        for(int i=0;i<hitColliders.Length;i++){
            if (hitColliders[i].name == "Updraft"){
                vup = Vector3.Dot(updraft.WindVelocity - playerRB.velocity, playerRB.transform.up);
            }
        }
        Vector3 n = Mathf.Sign(vup)*VerticalDragCoefficient*(vup*vup)*playerRB.transform.up;
        playerRB.AddForce(n);
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }
    void OnCollisionEnter(Collision collision){
        if (collision.collider.name == "LandingPlatform"){
            LandingPlatform l = (LandingPlatform) FindObjectOfType(typeof(LandingPlatform));
            if(playerRB.velocity.magnitude < l.MaxLandingSpeed){
            OnGameOver(true);}
            else{OnGameOver(false);}
        }
        else{
            OnGameOver(false);
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }
}
